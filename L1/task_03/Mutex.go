package main

import "sync"

func mtx(nums []int) int {
	// Изменение разделяемой перемнной без примитива синхронизации может привести к состоянию гонки и
	//непрепредсказуемому поведению программы
	m := sync.Mutex{}      // для использования разделяемой переменной res
	wg := sync.WaitGroup{} // чтоб дождаться всех горутин
	res := 0

	for _, num := range nums {
		wg.Add(1)
		go sumSqr(&res, &m, &wg, num)
	}

	wg.Wait()

	return res
}

func sumSqr(res *int, m *sync.Mutex, wg *sync.WaitGroup, num int) {
	//захват мьютекса прдоставляет монопольный доступ к разделяемому ресурсу, т.е. больше никто не сможет с
	// ним рабать, что позволит избежать необжиданных результатов при одновременном обращении к ресурсу
	// При попытке захвата уже захваченного мьютекса горутина блокируется до его разблокировки
	m.Lock()
	// критическая секция
	*res += num * num
	// освобождаем мьютекс, чтоб другие могли повзаимодействовать с res
	m.Unlock()
	wg.Done()
}
