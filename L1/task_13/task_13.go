package main

func main() {
	a := 10
	b := -15

	println(a, b)
	addSwap(&a, &b)
	println(a, b)
	multSwap(&a, &b)
	println(a, b)
	xorSwap(&a, &b)
	println(a, b)
}

func addSwap(a *int, b *int) {
	// не будет работать. ловается ао втором присваивании
	if a == b {
		return
	}

	// получаем сумму
	*a = *a + *b
	// из суммы вычитаем b и получаем a => b = a
	*b = *a - *b
	// из суммы вычитаем b = a и получаем b => a = b
	*a = *a - *b
}

// аналогично addSwap
func multSwap(a *int, b *int) {
	// не будет работать. ловается ао втором присваивании
	if a == b {
		return
	}
	//доп проверка для исключения деления на 0
	if *a == 0 {
		*a = *b
		*b = 0
		return
	}
	if *b == 0 {
		*b = *a
		*a = 0
		return
	}

	// получаем произведение
	*a = *a * *b
	// произведение делим на b и получаем a => b = a
	*b = *a / *b
	// произведение делим на b = a и получаем b => a = b
	*a = *a / *b
}

func xorSwap(a *int, b *int) {
	// не будет работать. ловается ао втором присваивании
	if a == b {
		return
	}
	// получаем "слепок", в котором отмечены все отличающиеся биты
	*a = *a ^ *b
	// пользуясь тем, что xor 1 и любого значения x даёт инвертирование значение x, получаем a
	// суть в том, что к b применяется слепок, который инвертирует все отличающиеся биты
	*b = *a ^ *b
	// аналогично, только теперь b = a и в результатк xor получаем значение b
	*a = *a ^ *b
}
